/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define kp &kp
#define kp__ kp
#define none__ &none
#define trans_ &trans
#define mo &mo
#define bt &bt

#define B_B 0
#define M_B 1
#define B_M 2
#define M_N 3
#define S_M 4

#define bt___0 bt BT_SEL 0
#define bt___1 bt BT_SEL 1
#define bt___2 bt BT_SEL 2
#define bt___C bt BT_CLR

#define SPA SPACE
#define BSP BACKSPACE
#define COM COMMA
#define SEM SEMI
#define FSL FSLH

#define mp_LOP kp LEFT_ALT
#define mp_LCT kp LEFT_CONTROL
#define mp_LCM kp LEFT_GUI
#define mp_LSH kp LEFT_SHIFT

#define mp_RSH kp RIGHT_SHIFT
#define mp_RCM kp RIGHT_GUI
#define mp_RCT kp RIGHT_CONTROL
#define mp_ROP kp RIGHT_ALT

#define K_1 KP_NUMBER_1
#define K_2 KP_NUMBER_2
#define K_3 KP_NUMBER_3
#define K_4 KP_NUMBER_4
#define K_5 KP_NUMBER_5
#define K_6 KP_NUMBER_6
#define K_7 KP_NUMBER_7
#define K_8 KP_NUMBER_8
#define K_9 KP_NUMBER_9
#define K_0 KP_NUMBER_0

#define K_A KP_ASTERISK
#define K_S KP_SLASH
#define K_D KP_DOT
#define K_P KP_PLUS
#define K_M KP_MINUS

////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// //////

/ {
    macros {
    };
    keymap {
        compatible = "zmk,keymap";

        base_base_layer {
            label = "BASE_BASE";
            bindings = <
kp TAB kp__ Q kp__ W kp__ E kp__ R kp__ T kp__ Y kp__ U kp__ I kp__ O kp__ P kp BSP
kp ESC kp__ A kp__ S kp__ D kp__ F kp__ G kp__ H kp__ J kp__ K kp__ L kp SEM kp SQT
mp_LSH kp__ Z kp__ X kp__ C kp__ V kp__ B kp__ N kp__ M kp COM kp DOT kp FSL mp_RSH
                     none__ mo M_B kp SPA kp RET mo B_M none__
            >;
        };

        mod_base_layer {
            label = "MOD_BASE";
            bindings = <
none__ bt___C bt___0 bt___1 bt___2 none__ kp__ Y kp__ U kp__ I kp__ O kp__ P kp BSP
none__ mp_LOP mp_LCT mp_LCM mp_LSH none__ kp__ H kp__ J kp__ K kp__ L kp SEM kp SQT
none__ none__ none__ none__ none__ none__ kp__ N kp__ M kp COM kp DOT kp FSL none__
                     none__ trans_ kp SPA kp RET none__ none__
            >;
        };

        base_mod_layer {
            label = "BASE_MOD";
            bindings = <
kp TAB kp__ Q kp__ W kp__ E kp__ R kp__ T none__ none__ none__ none__ none__ none__
kp ESC kp__ A kp__ S kp__ D kp__ F kp__ G none__ mp_RSH mp_RCM mp_RCT mp_ROP none__
none__ kp__ Z kp__ X kp__ C kp__ V kp__ B none__ none__ none__ none__ none__ none__
                     none__ none__ kp SPA kp RET trans_ none__
            >;
        };

        mod_number_layer {
            label = "MOD_NUMBER";
            bindings = <
none__ bt___C bt___0 bt___1 bt___2 none__ none__ kp K_7 kp K_8 kp K_9 kp K_A kp BSP
none__ mp_LOP mp_LCT mp_LCM mp_LSH none__ none__ kp K_4 kp K_5 kp K_6 kp K_S kp K_P
none__ none__ none__ none__ none__ none__ kp K_0 kp K_1 kp K_2 kp K_3 kp K_D kp K_M
                     none__ trans_ kp SPA kp RET none__ none__
            >;
        };

        special_mod_layer {
            label = "SPECIAL_MOD";
            bindings = <
kp TAB kp__ Q kp__ W kp__ E kp__ R kp__ T none__ none__ none__ none__ none__ none__
kp ESC kp__ A kp__ S kp__ D kp__ F kp__ G none__ mp_RSH mp_RCM mp_RCT mp_ROP none__
none__ kp__ Z kp__ X kp__ C kp__ V kp__ B none__ none__ none__ none__ none__ none__
                     none__ none__ kp SPA kp RET trans_ none__
            >;
        };
    };
};
